{"ast":null,"code":"import Charts from '@jiaminghi/charts';\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{\n          name: '',\n          value: 0\n        }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description Digital flop unit\n         * @type {String}\n         */\n        digitalFlopUnit: '',\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50,\n        /**\n         * @description showOriginValue\n         * @type {Boolean}\n         * @default showOriginValue = false\n         */\n        showOriginValue: false\n      },\n      mergedConfig: null,\n      chart: null,\n      activeIndex: 0,\n      animationHandler: ''\n    };\n  },\n  computed: {\n    digitalFlop() {\n      const {\n        mergedConfig,\n        activeIndex\n      } = this;\n      if (!mergedConfig) return {};\n      const {\n        digitalFlopStyle,\n        digitalFlopToFixed,\n        data,\n        showOriginValue,\n        digitalFlopUnit\n      } = mergedConfig;\n      const value = data.map(({\n        value\n      }) => value);\n      let displayValue;\n      if (showOriginValue) {\n        displayValue = value[activeIndex];\n      } else {\n        const sum = value.reduce((all, v) => all + v, 0);\n        const percent = parseFloat(value[activeIndex] / sum * 100) || 0;\n        displayValue = percent;\n      }\n      return {\n        content: showOriginValue ? `{nt}${digitalFlopUnit}` : `{nt}${digitalFlopUnit || '%'}`,\n        number: [displayValue],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      };\n    },\n    ringName() {\n      const {\n        mergedConfig,\n        activeIndex\n      } = this;\n      if (!mergedConfig) return '';\n      return mergedConfig.data[activeIndex].name;\n    },\n    fontSize() {\n      const {\n        mergedConfig\n      } = this;\n      if (!mergedConfig) return '';\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`;\n    }\n  },\n  watch: {\n    config() {\n      const {\n        animationHandler,\n        mergeConfig,\n        setRingOption\n      } = this;\n      clearTimeout(animationHandler);\n      this.activeIndex = 0;\n      mergeConfig();\n      setRingOption();\n    }\n  },\n  methods: {\n    init() {\n      const {\n        initChart,\n        mergeConfig,\n        setRingOption\n      } = this;\n      initChart();\n      mergeConfig();\n      setRingOption();\n    },\n    initChart() {\n      const {\n        $refs\n      } = this;\n      this.chart = new Charts($refs['active-ring-chart']);\n    },\n    mergeConfig() {\n      const {\n        defaultConfig,\n        config\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    setRingOption() {\n      const {\n        getRingOption,\n        chart,\n        ringAnimation\n      } = this;\n      const option = getRingOption();\n      chart.setOption(option, true);\n      ringAnimation();\n    },\n    getRingOption() {\n      const {\n        mergedConfig,\n        getRealRadius\n      } = this;\n      const radius = getRealRadius();\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius;\n      });\n      return {\n        series: [{\n          type: 'pie',\n          ...mergedConfig,\n          outsideLabel: {\n            show: false\n          }\n        }],\n        color: mergedConfig.color\n      };\n    },\n    getRealRadius(active = false) {\n      const {\n        mergedConfig,\n        chart\n      } = this;\n      const {\n        radius,\n        activeRadius,\n        lineWidth\n      } = mergedConfig;\n      const maxRadius = Math.min(...chart.render.area) / 2;\n      const halfLineWidth = lineWidth / 2;\n      let realRadius = active ? activeRadius : radius;\n      if (typeof realRadius !== 'number') realRadius = parseInt(realRadius) / 100 * maxRadius;\n      const insideRadius = realRadius - halfLineWidth;\n      const outSideRadius = realRadius + halfLineWidth;\n      return [insideRadius, outSideRadius];\n    },\n    ringAnimation() {\n      let {\n        activeIndex,\n        getRingOption,\n        chart,\n        getRealRadius\n      } = this;\n      const radius = getRealRadius();\n      const active = getRealRadius(true);\n      const option = getRingOption();\n      const {\n        data\n      } = option.series[0];\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active;\n        } else {\n          dataItem.radius = radius;\n        }\n      });\n      chart.setOption(option, true);\n      const {\n        activeTimeGap\n      } = option.series[0];\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1;\n        if (activeIndex >= data.length) activeIndex = 0;\n        this.activeIndex = activeIndex;\n        this.ringAnimation();\n      }, activeTimeGap);\n    }\n  },\n  mounted() {\n    const {\n      init\n    } = this;\n    init();\n  },\n  beforeDestroy() {\n    const {\n      animationHandler\n    } = this;\n    clearTimeout(animationHandler);\n  }\n};","map":{"version":3,"mappings":"AAWA;AAEA;AAEA;AAEA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAH;UAAAP;UAAAW;QAAA;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;QACAC;UACAC;UACAC;QACA;QACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;MACA;MAEAC;MAEAC;MAEAC;MAEAC;IACA;EACA;EACAC;IACAC;MACA;QAAAL;QAAAE;MAAA;MAEA;MAEA;QACAV;QACAG;QACAX;QACAe;QACAH;MACA;MAEA;QAAAR;MAAA;MAEA;MAEA;QACAkB;MACA;QACA;QAEA;QAEAA;MACA;MAEA;QACAC;QACAC;QACAC;QACAC;MACA;IACA;IACAC;MACA;QAAAX;QAAAE;MAAA;MAEA;MAEA;IACA;IACAT;MACA;QAAAO;MAAA;MAEA;MAEA;IACA;EACA;EACAY;IACA/B;MACA;QAAAsB;QAAAU;QAAAC;MAAA;MAEAC;MAEA;MAEAF;MAEAC;IACA;EACA;EACAE;IACAC;MACA;QAAAC;QAAAL;QAAAC;MAAA;MAEAI;MAEAL;MAEAC;IACA;IACAI;MACA;QAAAC;MAAA;MAEA;IACA;IACAN;MACA;QAAA5B;QAAAJ;MAAA;MAEA,8BACAuC,gCACAvC,aACA;IACA;IACAiC;MACA;QAAAO;QAAApB;QAAAqB;MAAA;MAEA;MAEArB;MAEAqB;IACA;IACAD;MACA;QAAArB;QAAAuB;MAAA;MAEA;MAEAvB;QACAwB;MACA;MAEA;QACAC,SACA;UACA3C;UACA;UACA4C;YACAC;UACA;QACA,EACA;QACApC;MACA;IACA;IACAgC;MACA;QAAAvB;QAAAC;MAAA;MAEA;QAAAf;QAAAC;QAAAE;MAAA;MAEA;MAEA;MAEA;MAEA,oCACAuC;MAEA;MACA;MAEA;IACA;IACAN;MACA;QAAApB;QAAAmB;QAAApB;QAAAsB;MAAA;MAEA;MACA;MAEA;MAEA;QAAAvC;MAAA;MAEAA;QACA;UACAwC;QACA;UACAA;QACA;MACA;MAEAvB;MAEA;QAAAX;MAAA;MAEA;QACAY;QAEA;QAEA;QAEA;MACA;IACA;EACA;EACA2B;IACA;MAAAZ;IAAA;IAEAA;EACA;EACAa;IACA;MAAA3B;IAAA;IAEAY;EACA;AACA","names":["name","components","dvDigitalFlop","props","config","type","default","data","defaultConfig","radius","activeRadius","value","lineWidth","activeTimeGap","color","digitalFlopStyle","fontSize","fill","digitalFlopToFixed","digitalFlopUnit","animationCurve","animationFrame","showOriginValue","mergedConfig","chart","activeIndex","animationHandler","computed","digitalFlop","displayValue","content","number","style","toFixed","ringName","watch","mergeConfig","setRingOption","clearTimeout","methods","init","initChart","$refs","deepClone","getRingOption","ringAnimation","getRealRadius","dataItem","series","outsideLabel","show","realRadius","mounted","beforeDestroy"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/activeRingChart/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-active-ring-chart\">\n    <div class=\"active-ring-chart-container\" ref=\"active-ring-chart\" />\n    <div class=\"active-ring-info\">\n      <dv-digital-flop :config=\"digitalFlop\" />\n      <div class=\"active-ring-name\" :style=\"fontSize\">{{ ringName }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Charts from '@jiaminghi/charts'\n\nimport dvDigitalFlop from '../../digitalFlop/src/main.vue'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvActiveRingChart',\n  components: {\n    dvDigitalFlop\n  },\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      defaultConfig: {\n        /**\n         * @description Ring radius\n         * @type {String|Number}\n         * @default radius = '50%'\n         * @example radius = '50%' | 100\n         */\n        radius: '50%',\n        /**\n         * @description Active ring radius\n         * @type {String|Number}\n         * @default activeRadius = '55%'\n         * @example activeRadius = '55%' | 110\n         */\n        activeRadius: '55%',\n        /**\n         * @description Ring data\n         * @type {Array<Object>}\n         * @default data = [{ name: '', value: 0 }]\n         */\n        data: [{ name: '', value: 0 }],\n        /**\n         * @description Ring line width\n         * @type {Number}\n         * @default lineWidth = 20\n         */\n        lineWidth: 20,\n        /**\n         * @description Active time gap (ms)\n         * @type {Number}\n         * @default activeTimeGap = 3000\n         */\n        activeTimeGap: 3000,\n        /**\n         * @description Ring color (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default color = [Charts Default Color]\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        color: [],\n        /**\n         * @description Digital flop style\n         * @type {Object}\n         */\n        digitalFlopStyle: {\n          fontSize: 25,\n          fill: '#fff'\n        },\n        /**\n         * @description Digital flop toFixed\n         * @type {Number}\n         */\n        digitalFlopToFixed: 0,\n        /**\n         * @description Digital flop unit\n         * @type {String}\n         */\n        digitalFlopUnit: '',\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50,\n        /**\n         * @description showOriginValue\n         * @type {Boolean}\n         * @default showOriginValue = false\n         */\n        showOriginValue: false\n      },\n\n      mergedConfig: null,\n\n      chart: null,\n\n      activeIndex: 0,\n\n      animationHandler: ''\n    }\n  },\n  computed: {\n    digitalFlop() {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return {}\n\n      const {\n        digitalFlopStyle,\n        digitalFlopToFixed,\n        data,\n        showOriginValue,\n        digitalFlopUnit\n      } = mergedConfig\n\n      const value = data.map(({ value }) => value)\n\n      let displayValue\n\n      if (showOriginValue) {\n        displayValue = value[activeIndex]\n      } else {\n        const sum = value.reduce((all, v) => all + v, 0)\n\n        const percent = parseFloat((value[activeIndex] / sum) * 100) || 0\n\n        displayValue = percent\n      }\n\n      return {\n        content: showOriginValue ? `{nt}${digitalFlopUnit}` : `{nt}${digitalFlopUnit || '%'}`,\n        number: [displayValue],\n        style: digitalFlopStyle,\n        toFixed: digitalFlopToFixed\n      }\n    },\n    ringName() {\n      const { mergedConfig, activeIndex } = this\n\n      if (!mergedConfig) return ''\n\n      return mergedConfig.data[activeIndex].name\n    },\n    fontSize() {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      return `font-size: ${mergedConfig.digitalFlopStyle.fontSize}px;`\n    }\n  },\n  watch: {\n    config() {\n      const { animationHandler, mergeConfig, setRingOption } = this\n\n      clearTimeout(animationHandler)\n\n      this.activeIndex = 0\n\n      mergeConfig()\n\n      setRingOption()\n    }\n  },\n  methods: {\n    init() {\n      const { initChart, mergeConfig, setRingOption } = this\n\n      initChart()\n\n      mergeConfig()\n\n      setRingOption()\n    },\n    initChart() {\n      const { $refs } = this\n\n      this.chart = new Charts($refs['active-ring-chart'])\n    },\n    mergeConfig() {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(\n        deepClone(defaultConfig, true),\n        config || {}\n      )\n    },\n    setRingOption() {\n      const { getRingOption, chart, ringAnimation } = this\n\n      const option = getRingOption()\n\n      chart.setOption(option, true)\n\n      ringAnimation()\n    },\n    getRingOption() {\n      const { mergedConfig, getRealRadius } = this\n\n      const radius = getRealRadius()\n\n      mergedConfig.data.forEach(dataItem => {\n        dataItem.radius = radius\n      })\n\n      return {\n        series: [\n          {\n            type: 'pie',\n            ...mergedConfig,\n            outsideLabel: {\n              show: false\n            }\n          }\n        ],\n        color: mergedConfig.color\n      }\n    },\n    getRealRadius(active = false) {\n      const { mergedConfig, chart } = this\n\n      const { radius, activeRadius, lineWidth } = mergedConfig\n\n      const maxRadius = Math.min(...chart.render.area) / 2\n\n      const halfLineWidth = lineWidth / 2\n\n      let realRadius = active ? activeRadius : radius\n\n      if (typeof realRadius !== 'number')\n        realRadius = (parseInt(realRadius) / 100) * maxRadius\n\n      const insideRadius = realRadius - halfLineWidth\n      const outSideRadius = realRadius + halfLineWidth\n\n      return [insideRadius, outSideRadius]\n    },\n    ringAnimation() {\n      let { activeIndex, getRingOption, chart, getRealRadius } = this\n\n      const radius = getRealRadius()\n      const active = getRealRadius(true)\n\n      const option = getRingOption()\n\n      const { data } = option.series[0]\n\n      data.forEach((dataItem, i) => {\n        if (i === activeIndex) {\n          dataItem.radius = active\n        } else {\n          dataItem.radius = radius\n        }\n      })\n\n      chart.setOption(option, true)\n\n      const { activeTimeGap } = option.series[0]\n\n      this.animationHandler = setTimeout(foo => {\n        activeIndex += 1\n\n        if (activeIndex >= data.length) activeIndex = 0\n\n        this.activeIndex = activeIndex\n\n        this.ringAnimation()\n      }, activeTimeGap)\n    }\n  },\n  mounted() {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy() {\n    const { animationHandler } = this\n\n    clearTimeout(animationHandler)\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}