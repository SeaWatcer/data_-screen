{"ast":null,"code":"import { uuid } from '../../../util/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    const id = uuid();\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n      width: 0,\n      height: 0,\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n      mergedConfig: null\n    };\n  },\n  computed: {\n    rectWidth() {\n      const {\n        mergedConfig,\n        width\n      } = this;\n      if (!mergedConfig) return 0;\n      const {\n        borderWidth\n      } = mergedConfig;\n      return width - borderWidth;\n    },\n    rectHeight() {\n      const {\n        mergedConfig,\n        height\n      } = this;\n      if (!mergedConfig) return 0;\n      const {\n        borderWidth\n      } = mergedConfig;\n      return height - borderWidth;\n    },\n    points() {\n      const {\n        mergedConfig,\n        width,\n        height\n      } = this;\n      const halfHeight = height / 2;\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`;\n      const {\n        borderWidth,\n        borderGap,\n        value\n      } = mergedConfig;\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value;\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `;\n    },\n    polylineWidth() {\n      const {\n        mergedConfig,\n        height\n      } = this;\n      if (!mergedConfig) return 0;\n      const {\n        borderWidth,\n        borderGap\n      } = mergedConfig;\n      return height - (borderWidth + borderGap) * 2;\n    },\n    linearGradient() {\n      const {\n        mergedConfig\n      } = this;\n      if (!mergedConfig) return [];\n      const {\n        colors\n      } = mergedConfig;\n      const colorNum = colors.length;\n      const colorOffsetGap = 100 / (colorNum - 1);\n      return colors.map((c, i) => [colorOffsetGap * i, c]);\n    },\n    polylineGradient() {\n      const {\n        gradientId1,\n        gradientId2,\n        mergedConfig\n      } = this;\n      if (!mergedConfig) return gradientId2;\n      if (mergedConfig.localGradient) return gradientId1;\n      return gradientId2;\n    },\n    gradient2XPos() {\n      const {\n        mergedConfig\n      } = this;\n      if (!mergedConfig) return '100%';\n      const {\n        value\n      } = mergedConfig;\n      return `${200 - value}%`;\n    },\n    details() {\n      const {\n        mergedConfig\n      } = this;\n      if (!mergedConfig) return '';\n      const {\n        value,\n        formatter\n      } = mergedConfig;\n      return formatter.replace('{value}', value);\n    }\n  },\n  watch: {\n    config() {\n      const {\n        mergeConfig\n      } = this;\n      mergeConfig();\n    }\n  },\n  methods: {\n    async init() {\n      const {\n        initWH,\n        config,\n        mergeConfig\n      } = this;\n      await initWH();\n      if (!config) return;\n      mergeConfig();\n    },\n    async initWH() {\n      const {\n        $nextTick,\n        $refs\n      } = this;\n      await $nextTick();\n      const {\n        clientWidth,\n        clientHeight\n      } = $refs['percent-pond'];\n      this.width = clientWidth;\n      this.height = clientHeight;\n    },\n    mergeConfig() {\n      const {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    }\n  },\n  mounted() {\n    const {\n      init\n    } = this;\n    init();\n  }\n};","map":{"version":3,"mappings":"AA8CA;AAEA;AAEA;AAEA;EACAA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACA;MACAC;MACAC;MAEAC;MACAC;MAEAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;MACA;MAEAC;IACA;EACA;EACAC;IACAC;MACA;QAAAF;QAAAZ;MAAA;MAEA;MAEA;QAAAK;MAAA;MAEA;IACA;IACAU;MACA;QAAAH;QAAAX;MAAA;MAEA;MAEA;QAAAI;MAAA;MAEA;IACA;IACAW;MACA;QAAAJ;QAAAZ;QAAAC;MAAA;MAEA;MAEA;MAEA;QAAAI;QAAAC;QAAAH;MAAA;MAEA;MAEA;AACA;AACA;AACA;IACA;IACAc;MACA;QAAAL;QAAAX;MAAA;MAEA;MAEA;QAAAI;QAAAC;MAAA;MAEA;IACA;IACAY;MACA;QAAAN;MAAA;MAEA;MAEA;QAAAR;MAAA;MAEA;MAEA;MAEA;IACA;IACAe;MACA;QAAArB;QAAAC;QAAAa;MAAA;MAEA;MAEA;MAEA;IACA;IACAQ;MACA;QAAAR;MAAA;MAEA;MAEA;QAAAT;MAAA;MAEA;IACA;IACAkB;MACA;QAAAT;MAAA;MAEA;MAEA;QAAAT;QAAAQ;MAAA;MAEA;IACA;EACA;EACAW;IACA5B;MACA;QAAA6B;MAAA;MAEAA;IACA;EACA;EACAC;IACA;MACA;QAAAC;QAAA/B;QAAA6B;MAAA;MAEA;MAEA;MAEAA;IACA;IACA;MACA;QAAAG;QAAAC;MAAA;MAEA;MAEA;QAAAC;QAAAC;MAAA;MAEA;MACA;IACA;IACAN;MACA;QAAA7B;QAAAQ;MAAA;MAEA;IACA;EACA;EACA4B;IACA;MAAAC;IAAA;IAEAA;EACA;AACA","names":["name","props","config","type","default","data","gradientId1","gradientId2","width","height","defaultConfig","value","colors","borderWidth","borderGap","lineDash","textColor","borderRadius","localGradient","formatter","mergedConfig","computed","rectWidth","rectHeight","points","polylineWidth","linearGradient","polylineGradient","gradient2XPos","details","watch","mergeConfig","methods","initWH","$nextTick","$refs","clientWidth","clientHeight","mounted","init"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}