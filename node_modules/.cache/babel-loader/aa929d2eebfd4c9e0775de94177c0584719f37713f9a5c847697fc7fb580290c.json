{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      ref: 'scroll-board',\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Pause scroll when mouse hovered\n         * @type {Boolean}\n         * @default hoverPause = true\n         * @example hoverPause = true | false\n         */\n        hoverPause: true\n      },\n      mergedConfig: null,\n      header: [],\n      rowsData: [],\n      rows: [],\n      widths: [],\n      heights: [],\n      avgHeight: 0,\n      aligns: [],\n      animationIndex: 0,\n      animationHandler: '',\n      updater: 0,\n      needCalc: false\n    };\n  },\n  watch: {\n    config() {\n      const {\n        stopAnimation,\n        calcData\n      } = this;\n      stopAnimation();\n      this.animationIndex = 0;\n      calcData();\n    }\n  },\n  methods: {\n    handleHover(enter, ri, ci, row, ceil) {\n      const {\n        mergedConfig,\n        emitEvent,\n        stopAnimation,\n        animation\n      } = this;\n      if (enter) emitEvent('mouseover', ri, ci, row, ceil);\n      if (!mergedConfig.hoverPause) return;\n      if (enter) {\n        stopAnimation();\n      } else {\n        animation(true);\n      }\n    },\n    afterAutoResizeMixinInit() {\n      const {\n        calcData\n      } = this;\n      calcData();\n    },\n    onResize() {\n      const {\n        mergedConfig,\n        calcWidths,\n        calcHeights\n      } = this;\n      if (!mergedConfig) return;\n      calcWidths();\n      calcHeights();\n    },\n    calcData() {\n      const {\n        mergeConfig,\n        calcHeaderData,\n        calcRowsData\n      } = this;\n      mergeConfig();\n      calcHeaderData();\n      calcRowsData();\n      const {\n        calcWidths,\n        calcHeights,\n        calcAligns\n      } = this;\n      calcWidths();\n      calcHeights();\n      calcAligns();\n      const {\n        animation\n      } = this;\n      animation(true);\n    },\n    mergeConfig() {\n      let {\n        config,\n        defaultConfig\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    calcHeaderData() {\n      let {\n        header,\n        index,\n        indexHeader\n      } = this.mergedConfig;\n      if (!header.length) {\n        this.header = [];\n        return;\n      }\n      header = [...header];\n      if (index) header.unshift(indexHeader);\n      this.header = header;\n    },\n    calcRowsData() {\n      let {\n        data,\n        index,\n        headerBGC,\n        rowNum\n      } = this.mergedConfig;\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row];\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`;\n          row.unshift(indexTag);\n          return row;\n        });\n      }\n      data = data.map((ceils, i) => ({\n        ceils,\n        rowIndex: i\n      }));\n      const rowLength = data.length;\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data];\n      }\n      data = data.map((d, i) => ({\n        ...d,\n        scroll: i\n      }));\n      this.rowsData = data;\n      this.rows = data;\n    },\n    calcWidths() {\n      const {\n        width,\n        mergedConfig,\n        rowsData\n      } = this;\n      const {\n        columnWidth,\n        header\n      } = mergedConfig;\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0);\n      let columnNum = 0;\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length;\n      } else if (header.length) {\n        columnNum = header.length;\n      }\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length);\n      const widths = new Array(columnNum).fill(avgWidth);\n      this.widths = deepMerge(widths, columnWidth);\n    },\n    calcHeights(onresize = false) {\n      const {\n        height,\n        mergedConfig,\n        header\n      } = this;\n      const {\n        headerHeight,\n        rowNum,\n        data\n      } = mergedConfig;\n      let allHeight = height;\n      if (header.length) allHeight -= headerHeight;\n      const avgHeight = allHeight / rowNum;\n      this.avgHeight = avgHeight;\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight);\n    },\n    calcAligns() {\n      const {\n        header,\n        mergedConfig\n      } = this;\n      const columnNum = header.length;\n      let aligns = new Array(columnNum).fill('left');\n      const {\n        align\n      } = mergedConfig;\n      this.aligns = deepMerge(aligns, align);\n    },\n    async animation(start = false) {\n      const {\n        needCalc,\n        calcHeights,\n        calcRowsData\n      } = this;\n      if (needCalc) {\n        calcRowsData();\n        calcHeights();\n        this.needCalc = false;\n      }\n      let {\n        avgHeight,\n        animationIndex,\n        mergedConfig,\n        rowsData,\n        animation,\n        updater\n      } = this;\n      const {\n        waitTime,\n        carousel,\n        rowNum\n      } = mergedConfig;\n      const rowLength = rowsData.length;\n      if (rowNum >= rowLength) return;\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n        if (updater !== this.updater) return;\n      }\n      const animationNum = carousel === 'single' ? 1 : rowNum;\n      let rows = rowsData.slice(animationIndex);\n      rows.push(...rowsData.slice(0, animationIndex));\n      this.rows = rows.slice(0, carousel === 'page' ? rowNum * 2 : rowNum + 1);\n      this.heights = new Array(rowLength).fill(avgHeight);\n      await new Promise(resolve => setTimeout(resolve, 300));\n      if (updater !== this.updater) return;\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0));\n      animationIndex += animationNum;\n      const back = animationIndex - rowLength;\n      if (back >= 0) animationIndex = back;\n      this.animationIndex = animationIndex;\n      this.animationHandler = setTimeout(animation, waitTime - 300);\n    },\n    stopAnimation() {\n      const {\n        animationHandler,\n        updater\n      } = this;\n      this.updater = (updater + 1) % 999999;\n      if (!animationHandler) return;\n      clearTimeout(animationHandler);\n    },\n    emitEvent(type, ri, ci, row, ceil) {\n      const {\n        ceils,\n        rowIndex\n      } = row;\n      this.$emit(type, {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      });\n    },\n    updateRows(rows, animationIndex) {\n      const {\n        mergedConfig,\n        animationHandler,\n        animation\n      } = this;\n      this.mergedConfig = {\n        ...mergedConfig,\n        data: [...rows]\n      };\n      this.needCalc = true;\n      if (typeof animationIndex === 'number') this.animationIndex = animationIndex;\n      if (!animationHandler) animation(true);\n    }\n  },\n  destroyed() {\n    const {\n      stopAnimation\n    } = this;\n    stopAnimation();\n  }\n};","map":{"version":3,"mappings":";;AAkDA;AAEA;AAEA;AAEA;EACAA;EACAC;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACAC;MAEAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAH;QACA;AACA;AACA;AACA;AACA;QACAI;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC;MACA;MAEAC;MAEAb;MAEAc;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;MAEAC;IACA;EACA;EACAC;IACA9B;MACA;QAAA+B;QAAAC;MAAA;MAEAD;MAEA;MAEAC;IACA;EACA;EACAC;IACAC;MACA;QAAAf;QAAAgB;QAAAJ;QAAAK;MAAA;MAEA;MACA;MAEA;QACAL;MACA;QACAK;MACA;IACA;IACAC;MACA;QAAAL;MAAA;MAEAA;IACA;IACAM;MACA;QAAAnB;QAAAoB;QAAAC;MAAA;MAEA;MAEAD;MAEAC;IACA;IACAR;MACA;QAAAS;QAAAC;QAAAC;MAAA;MAEAF;MAEAC;MAEAC;MAEA;QAAAJ;QAAAC;QAAAI;MAAA;MAEAL;MAEAC;MAEAI;MAEA;QAAAR;MAAA;MAEAA;IACA;IACAK;MACA;QAAAzC;QAAAK;MAAA;MAEA;IACA;IACAqC;MACA;QAAApC;QAAAS;QAAAC;MAAA;MAEA;QACA;QAEA;MACA;MAEAV;MAEA;MAEA;IACA;IACAqC;MACA;QAAAxC;QAAAY;QAAAP;QAAAD;MAAA;MAEA;QACAJ;UACA0C;UAEA;UAEAA;UAEA;QACA;MACA;MAEA1C;QAAA2C;QAAAC;MAAA;MAEA;MAEA;QACA5C;MACA;MAEAA;QAAA;QAAA6C;MAAA;MAEA;MACA;IACA;IACAT;MACA;QAAAU;QAAA9B;QAAAC;MAAA;MAEA;QAAAP;QAAAP;MAAA;MAEA;MAEA;MACA;QACA4C;MACA;QACAA;MACA;MAEA;MAEA;MAEA;IACA;IACAV;MACA;QAAAW;QAAAhC;QAAAb;MAAA;MAEA;QAAAM;QAAAL;QAAAJ;MAAA;MAEA;MAEA;MAEA;MAEA;MAEA;IACA;IACAyC;MACA;QAAAtC;QAAAa;MAAA;MAEA;MAEA;MAEA;QAAAL;MAAA;MAEA;IACA;IACA;MACA;QAAAe;QAAAW;QAAAG;MAAA;MAEA;QACAA;QACAH;QACA;MACA;MAEA;QAAAhB;QAAAE;QAAAP;QAAAC;QAAAgB;QAAAR;MAAA;MAEA;QAAAjB;QAAAM;QAAAV;MAAA;MAEA;MAEA;MAEA;QACA;QACA;MACA;MAEA;MAEA;MACAc;MAEA;MACA;MAEA;MACA;MAEA;MAEAK;MAEA;MACA;MAEA;MACA;IACA;IACAK;MACA;QAAAJ;QAAAC;MAAA;MAEA;MAEA;MAEAwB;IACA;IACAjB;MACA;QAAAW;QAAAC;MAAA;MAEA;QACAF;QACAQ;QACAN;QACAO;MACA;IACA;IACAC;MACA;QAAApC;QAAAQ;QAAAS;MAAA;MAEA;QACA;QACAjC;MACA;MAEA;MAEA;MACA;IACA;EACA;EACAqD;IACA;MAAAzB;IAAA;IAEAA;EACA;AACA","names":["name","mixins","props","config","type","default","data","ref","defaultConfig","header","rowNum","headerBGC","oddRowBGC","evenRowBGC","waitTime","headerHeight","columnWidth","align","index","indexHeader","carousel","hoverPause","mergedConfig","rowsData","rows","widths","heights","avgHeight","aligns","animationIndex","animationHandler","updater","needCalc","watch","stopAnimation","calcData","methods","handleHover","emitEvent","animation","afterAutoResizeMixinInit","onResize","calcWidths","calcHeights","mergeConfig","calcHeaderData","calcRowsData","calcAligns","row","ceils","rowIndex","scroll","width","columnNum","height","clearTimeout","ceil","columnIndex","updateRows","destroyed"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-board\" :ref=\"ref\">\n    <div class=\"header\" v-if=\"header.length && mergedConfig\" :style=\"`background-color: ${mergedConfig.headerBGC};`\">\n      <div\n        class=\"header-item\"\n        v-for=\"(headerItem, i) in header\"\n        :key=\"`${headerItem}${i}`\"\n        :style=\"`\n          height: ${mergedConfig.headerHeight}px;\n          line-height: ${mergedConfig.headerHeight}px;\n          width: ${widths[i]}px;\n        `\"\n        :align=\"aligns[i]\"\n        v-html=\"headerItem\"\n      />\n    </div>\n\n    <div\n      v-if=\"mergedConfig\"\n      class=\"rows\"\n      :style=\"`height: ${height - (header.length ? mergedConfig.headerHeight : 0)}px;`\"\n    >\n      <div\n        class=\"row-item\"\n        v-for=\"(row, ri) in rows\"\n        :key=\"`${row.toString()}${row.scroll}`\"\n        :style=\"`\n          height: ${heights[ri]}px;\n          line-height: ${heights[ri]}px;\n          background-color: ${mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `\"\n      >\n        <div\n          class=\"ceil\"\n          v-for=\"(ceil, ci) in row.ceils\"\n          :key=\"`${ceil}${ri}${ci}`\"\n          :style=\"`width: ${widths[ci]}px;`\"\n          :align=\"aligns[ci]\"\n          v-html=\"ceil\"\n          @click=\"emitEvent('click', ri, ci, row, ceil)\"\n          @mouseenter=\"handleHover(true, ri, ci, row, ceil)\"\n          @mouseleave=\"handleHover(false)\"\n        />\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-board',\n\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Pause scroll when mouse hovered\n         * @type {Boolean}\n         * @default hoverPause = true\n         * @example hoverPause = true | false\n         */\n        hoverPause: true\n      },\n\n      mergedConfig: null,\n\n      header: [],\n\n      rowsData: [],\n\n      rows: [],\n\n      widths: [],\n\n      heights: [],\n\n      avgHeight: 0,\n\n      aligns: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0,\n\n      needCalc: false\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      this.animationIndex = 0\n\n      calcData()\n    }\n  },\n  methods: {\n    handleHover(enter, ri, ci, row, ceil){\n      const { mergedConfig, emitEvent, stopAnimation, animation } = this\n\n      if (enter) emitEvent('mouseover', ri, ci, row, ceil)\n      if (!mergedConfig.hoverPause) return\n\n      if (enter) {\n        stopAnimation()\n      } else {\n        animation(true)\n      }\n    },\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcWidths, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcWidths()\n\n      calcHeights()\n    },\n    calcData () {\n      const { mergeConfig, calcHeaderData, calcRowsData } = this\n\n      mergeConfig()\n\n      calcHeaderData()\n\n      calcRowsData()\n\n      const { calcWidths, calcHeights, calcAligns } = this\n\n      calcWidths()\n\n      calcHeights()\n\n      calcAligns()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcHeaderData () {\n      let { header, index, indexHeader} = this.mergedConfig\n\n      if (!header.length) {\n        this.header = []\n\n        return\n      }\n\n      header = [...header]\n\n      if (index) header.unshift(indexHeader)\n\n      this.header = header\n    },\n    calcRowsData () {\n      let { data, index, headerBGC, rowNum } = this.mergedConfig\n\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row]\n\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`\n\n          row.unshift(indexTag)\n\n          return row\n        })\n      }\n\n      data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcWidths () {\n      const { width, mergedConfig, rowsData } = this\n\n      const { columnWidth, header } = mergedConfig\n\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n      let columnNum = 0\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length\n      } else if (header.length) {\n        columnNum = header.length\n      }\n\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n      const widths = new Array(columnNum).fill(avgWidth)\n\n      this.widths = deepMerge(widths, columnWidth)\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig, header } = this\n\n      const { headerHeight, rowNum, data } = mergedConfig\n\n      let allHeight = height\n\n      if (header.length) allHeight -= headerHeight\n\n      const avgHeight = allHeight / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    calcAligns () {\n      const { header, mergedConfig } = this\n\n      const columnNum = header.length\n\n      let aligns = new Array(columnNum).fill('left')\n\n      const { align } = mergedConfig\n\n      this.aligns = deepMerge(aligns, align)\n    },\n    async animation (start = false) {\n      const { needCalc, calcHeights, calcRowsData } = this\n\n      if (needCalc) {\n        calcRowsData()\n        calcHeights()\n        this.needCalc = false\n      }\n\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, carousel === 'page' ? rowNum * 2 : rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n    emitEvent (type, ri, ci, row, ceil) {\n      const { ceils, rowIndex } = row\n\n      this.$emit(type, {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      })\n    },\n    updateRows(rows, animationIndex) {\n      const { mergedConfig, animationHandler, animation } = this\n\n      this.mergedConfig = {\n        ...mergedConfig,\n        data: [...rows]\n      }\n\n      this.needCalc = true\n\n      if (typeof animationIndex === 'number') this.animationIndex = animationIndex\n      if (!animationHandler) animation(true)\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}