{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: 'lineEcharts',\n  props: {\n    typeCharts: {\n      type: String,\n      default: 'line'\n    }\n  },\n  data() {\n    return {};\n  },\n  mounted() {\n    this.lineEcharts();\n    // this.initWebsocket()\n  },\n\n  methods: {\n    lineEcharts() {\n      const gaugeData = [{\n        value: 20,\n        name: 'Perfect',\n        title: {\n          offsetCenter: ['0%', '-30%']\n        },\n        detail: {\n          valueAnimation: true,\n          offsetCenter: ['0%', '-20%']\n        }\n      }, {\n        value: 40,\n        name: 'Good',\n        title: {\n          offsetCenter: ['0%', '0%']\n        },\n        detail: {\n          valueAnimation: true,\n          offsetCenter: ['0%', '10%']\n        }\n      }, {\n        value: 60,\n        name: 'Commonly',\n        title: {\n          offsetCenter: ['0%', '30%']\n        },\n        detail: {\n          valueAnimation: true,\n          offsetCenter: ['0%', '40%']\n        }\n      }];\n      // 基于准备好的dom，初始化echarts实例\n      var myChart = echarts.init(document.getElementById('min11'));\n\n      // 指定图表的配置项和数据\n      var option = {\n        series: [{\n          type: 'gauge',\n          startAngle: 90,\n          endAngle: -270,\n          pointer: {\n            show: false\n          },\n          progress: {\n            show: true,\n            overlap: false,\n            roundCap: true,\n            clip: false,\n            itemStyle: {\n              borderWidth: 1,\n              borderColor: '#464646'\n            }\n          },\n          axisLine: {\n            lineStyle: {\n              width: 40\n            }\n          },\n          splitLine: {\n            show: false,\n            distance: 0,\n            length: 10\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            show: false,\n            distance: 50\n          },\n          data: gaugeData,\n          title: {\n            fontSize: 14\n          },\n          detail: {\n            width: 50,\n            height: 14,\n            fontSize: 14,\n            color: 'inherit',\n            borderColor: 'inherit',\n            borderRadius: 20,\n            borderWidth: 1,\n            formatter: '{value}%'\n          }\n        }]\n      };\n      setInterval(function () {\n        gaugeData[0].value = +(Math.random() * 100).toFixed(2);\n        gaugeData[1].value = +(Math.random() * 100).toFixed(2);\n        gaugeData[2].value = +(Math.random() * 100).toFixed(2);\n        myChart.setOption({\n          series: [{\n            data: gaugeData,\n            pointer: {\n              show: false\n            }\n          }]\n        });\n      }, 2000);\n\n      // 使用刚指定的配置项和数据显示图表。\n      myChart.setOption(option);\n    }\n    // 客户端与服务端连接\n    // initWebsocket () {\n    //   const ws = new WebSocket('ws://127.0.0.1:8090')\n    //   console.log(ws)\n    //   // 成功回调\n    //   ws.onopen = function () {\n    //     alert('WebSocket连接成功')\n    //   }\n    //   // 错误回调\n    //   ws.onerror = function () {\n    //     alert('api接口失效失败')\n    //   }\n    //   // 接收消息\n    //   ws.onmessage = function (msg) {\n    //     alert(msg)\n    //   }\n    // }\n  }\n};","map":{"version":3,"mappings":"AAKA;AACA;EACAA;EACAC;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA,QAEA;EACA;EACAC;IACA;IACA;EACA;;EACAC;IACAC;MACA,mBACA;QACAC;QACAT;QACAU;UACAC;QACA;QACAC;UACAC;UACAF;QACA;MACA,GACA;QACAF;QACAT;QACAU;UACAC;QACA;QACAC;UACAC;UACAF;QACA;MACA,GACA;QACAF;QACAT;QACAU;UACAC;QACA;QACAC;UACAC;UACAF;QACA;MACA,EACA;MACA;MACA;;MAEA;MACA;QACAG,SACA;UACAX;UACAY;UACAC;UACAC;YACAC;UACA;UACAC;YACAD;YACAE;YACAC;YACAC;YACAC;cACAC;cACAC;YACA;UACA;UACAC;YACAC;cACAC;YACA;UACA;UACAC;YACAX;YACAY;YACAC;UACA;UACAC;YACAd;UACA;UACAe;YACAf;YACAY;UACA;UACAzB;UACAK;YACAwB;UACA;UACAtB;YACAgB;YACAO;YACAD;YACAE;YACAX;YACAY;YACAb;YACAc;UACA;QACA;MAEA;MACAC;QACAC;QACAA;QACAA;QACAC;UACA3B,SACA;YACAT;YACAY;cACAC;YACA;UACA;QAEA;MACA;;MAEA;MACAuB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AACA","names":["name","props","typeCharts","type","default","data","mounted","methods","lineEcharts","value","title","offsetCenter","detail","valueAnimation","series","startAngle","endAngle","pointer","show","progress","overlap","roundCap","clip","itemStyle","borderWidth","borderColor","axisLine","lineStyle","width","splitLine","distance","length","axisTick","axisLabel","fontSize","height","color","borderRadius","formatter","setInterval","gaugeData","myChart"],"sourceRoot":"src/views/apacheEcharts","sources":["index.vue"],"sourcesContent":["<template>\r\n  <div id=\"min11\" style=\"width: 100%;height:110%;\"></div>\r\n</template>\r\n\r\n<script>\r\nimport *as echarts from 'echarts'\r\nexport default {\r\n  name: 'lineEcharts',\r\n  props: {\r\n    typeCharts: {\r\n      type: String,\r\n      default: 'line'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n\r\n    }\r\n  },\r\n  mounted () {\r\n    this.lineEcharts()\r\n    // this.initWebsocket()\r\n  },\r\n  methods: {\r\n    lineEcharts () {\r\n      const gaugeData = [\r\n        {\r\n          value: 20,\r\n          name: 'Perfect',\r\n          title: {\r\n            offsetCenter: ['0%', '-30%']\r\n          },\r\n          detail: {\r\n            valueAnimation: true,\r\n            offsetCenter: ['0%', '-20%']\r\n          }\r\n        },\r\n        {\r\n          value: 40,\r\n          name: 'Good',\r\n          title: {\r\n            offsetCenter: ['0%', '0%']\r\n          },\r\n          detail: {\r\n            valueAnimation: true,\r\n            offsetCenter: ['0%', '10%']\r\n          }\r\n        },\r\n        {\r\n          value: 60,\r\n          name: 'Commonly',\r\n          title: {\r\n            offsetCenter: ['0%', '30%']\r\n          },\r\n          detail: {\r\n            valueAnimation: true,\r\n            offsetCenter: ['0%', '40%']\r\n          }\r\n        }\r\n      ];\r\n      // 基于准备好的dom，初始化echarts实例\r\n      var myChart = echarts.init(document.getElementById('min11'));\r\n\r\n      // 指定图表的配置项和数据\r\n      var option = {\r\n        series: [\r\n          {\r\n            type: 'gauge',\r\n            startAngle: 90,\r\n            endAngle: -270,\r\n            pointer: {\r\n              show: false\r\n            },\r\n            progress: {\r\n              show: true,\r\n              overlap: false,\r\n              roundCap: true,\r\n              clip: false,\r\n              itemStyle: {\r\n                borderWidth: 1,\r\n                borderColor: '#464646'\r\n              }\r\n            },\r\n            axisLine: {\r\n              lineStyle: {\r\n                width: 40\r\n              }\r\n            },\r\n            splitLine: {\r\n              show: false,\r\n              distance: 0,\r\n              length: 10\r\n            },\r\n            axisTick: {\r\n              show: false\r\n            },\r\n            axisLabel: {\r\n              show: false,\r\n              distance: 50\r\n            },\r\n            data: gaugeData,\r\n            title: {\r\n              fontSize: 14\r\n            },\r\n            detail: {\r\n              width: 50,\r\n              height: 14,\r\n              fontSize: 14,\r\n              color: 'inherit',\r\n              borderColor: 'inherit',\r\n              borderRadius: 20,\r\n              borderWidth: 1,\r\n              formatter: '{value}%'\r\n            }\r\n          }\r\n        ]\r\n      };\r\n      setInterval(function () {\r\n        gaugeData[0].value = +(Math.random() * 100).toFixed(2);\r\n        gaugeData[1].value = +(Math.random() * 100).toFixed(2);\r\n        gaugeData[2].value = +(Math.random() * 100).toFixed(2);\r\n        myChart.setOption({\r\n          series: [\r\n            {\r\n              data: gaugeData,\r\n              pointer: {\r\n                show: false\r\n              }\r\n            }\r\n          ]\r\n        });\r\n      }, 2000);\r\n\r\n      // 使用刚指定的配置项和数据显示图表。\r\n      myChart.setOption(option);\r\n    },\r\n    // 客户端与服务端连接\r\n    // initWebsocket () {\r\n    //   const ws = new WebSocket('ws://127.0.0.1:8090')\r\n    //   console.log(ws)\r\n    //   // 成功回调\r\n    //   ws.onopen = function () {\r\n    //     alert('WebSocket连接成功')\r\n    //   }\r\n    //   // 错误回调\r\n    //   ws.onerror = function () {\r\n    //     alert('api接口失效失败')\r\n    //   }\r\n    //   // 接收消息\r\n    //   ws.onmessage = function (msg) {\r\n    //     alert(msg)\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}